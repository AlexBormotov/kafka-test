stages:
  - test
  - deploy

variables:
  GOOGLE_PROJECT_ID: "northern-shield-453920-a4" # Не менять!
  GOOGLE_COMPUTE_ZONE: "us-central1-a" # Не менять!
  # DOCKER_DRIVER: overlay2 # Скорее всего больше не нужен для runner'а
  VM_NAME: "web-server"
  # SA_EMAIL: "..." # Больше не используется напрямую в скриптах деплоя
  
test:
  stage: test
  image: python:3.11
  script:
    - echo "Running tests..."
    - pip install -r requirements.txt
    - python -m pytest
  # Можно добавить артефакты с отчетами тестов, если нужно

deploy:
  stage: deploy
  image: google/cloud-sdk:latest # Нужен для gcloud команд
  variables:
    GIT_STRATEGY: none # Не скачиваем код на runner, т.к. клонируем на VM
  before_script:
    - echo "Setting up Google Cloud credentials..."
    - echo "$GOOGLE_CLOUD_KEY" > /tmp/key.json
    # Активируем сервисный аккаунт, который будет выполнять команды на VM
    - gcloud auth activate-service-account --key-file=/tmp/key.json
    - gcloud config set project $GOOGLE_PROJECT_ID
  script:
    - echo "Deploying to VM via Docker Compose..."
    # Формируем URL репозитория с токеном доступа CI/CD
    # CI_JOB_TOKEN имеет доступ к репозиторию только на время выполнения задания
    - export REPO_URL="https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    # Директория проекта на VM
    - export PROJECT_DIR="/home/sa_kafka_test/kafka-test"

    # Шаг 1: Проверка/установка необходимых пакетов на VM
    - |
      gcloud compute ssh sa_kafka_test@$VM_NAME --zone=$GOOGLE_COMPUTE_ZONE --command="
        set -e; # Прерываем выполнение при первой ошибке
        echo '--- Checking prerequisites on VM ---';
        sudo apt-get update -qq || true;

        # Git
        if ! command -v git &> /dev/null; then echo 'Installing git...'; sudo apt-get install -y -qq git; else echo 'Git already installed.'; fi;

        # Docker
        if ! command -v docker &> /dev/null; then
          echo 'Installing docker...';
          sudo apt-get install -y -qq docker.io;
          sudo systemctl start docker;
          sudo systemctl enable docker;
          sudo usermod -aG docker \$(whoami);
          echo 'Docker installed. User \$(whoami) added to docker group. Re-login might be needed for group changes to take effect.';
        else
          echo 'Docker already installed.';
          # Простая проверка группы
          if ! groups \$(whoami) | grep -q '\\bdocker\\b'; then
             echo 'User \$(whoami) not in docker group, adding...';
             sudo usermod -aG docker \$(whoami);
             echo 'User \$(whoami) added to docker group. Re-login might be needed.';
          else
             echo 'User \$(whoami) already in docker group.';
          fi;
        fi;

        # Docker Compose
        if ! command -v docker-compose &> /dev/null; then echo 'Installing docker-compose...'; sudo apt-get install -y -qq docker-compose; else echo 'Docker Compose already installed.'; fi;

        echo '--- Prerequisites check done ---\';
      "

    # Шаг 2: Клонирование или обновление репозитория на VM
    - |
      gcloud compute ssh sa_kafka_test@$VM_NAME --zone=$GOOGLE_COMPUTE_ZONE --command="
        set -e;
        echo '--- Cloning or updating repository ---';
        # Используем одинарные кавычки внутри команды для простоты
        export PROJECT_DIR_VM='$PROJECT_DIR';
        export REPO_URL_VM='$REPO_URL';

        # Проверяем, существует ли директория .git
        if [ -d \\\"\$PROJECT_DIR_VM/.git\\\" ]; then
          echo 'Repository exists, pulling changes...';
          cd \\\"\$PROJECT_DIR_VM\\\"; git checkout main; git fetch origin; git reset --hard origin/main;
          echo 'Pull successful.';
        else
          echo 'Repository directory check failed or not a git repo. Cloning...';
          rm -rf \\\"\$PROJECT_DIR_VM\\\"; echo \\\"Removed potentially existing directory \$PROJECT_DIR_VM\\\";
          mkdir -p \\\"\$(dirname \\\"\$PROJECT_DIR_VM\\\")\\\"; echo \\\"Ensured parent directory exists\\\";
          git clone --depth 1 --branch main \\\"\$REPO_URL_VM\\\" \\\"\$PROJECT_DIR_VM\\\";
          echo 'Clone successful.';
        fi;
        echo \'--- Repository operation done ---\';
      "

    # Шаг 3: Запуск Docker Compose на VM
    - |
      gcloud compute ssh sa_kafka_test@$VM_NAME --zone=$GOOGLE_COMPUTE_ZONE --command="
        set -e;
        echo '--- Running Docker Compose ---';
        export PROJECT_DIR_VM='$PROJECT_DIR';
        cd \\\"\$PROJECT_DIR_VM\\\";
        echo \\\"Current directory: \$(pwd)\\\";
        echo \'Listing files:\';
        ls -la;
        # Проверяем наличие docker-compose.yml
        if [ -f docker-compose.yml ]; then
          echo 'docker-compose.yml found. Pulling latest images...';
          docker-compose pull;
          echo 'Building and starting services...';
          docker-compose up -d --build --remove-orphans;
          echo 'Docker Compose finished successfully.';
        else
          echo 'ERROR: docker-compose.yml not found in $PROJECT_DIR_VM!';
          exit 1;
        fi;
        echo '--- Docker Compose operation done ---\';
      "

  only:
    - main # Запускаем деплой только для main ветки 