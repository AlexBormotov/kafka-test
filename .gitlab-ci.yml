stages:
  - test
  - deploy

variables:
  GOOGLE_PROJECT_ID: "northern-shield-453920-a4" # Не менять!
  GOOGLE_COMPUTE_ZONE: "us-central1-a" # Не менять!
  # DOCKER_DRIVER: overlay2 # Скорее всего больше не нужен для runner'а
  VM_NAME: "web-server"
  VM_USER: "sa_kafka_test" # Имя пользователя на VM
  # SA_EMAIL: "..." # Больше не используется напрямую в скриптах деплоя
  
test:
  stage: test
  image: python:3.11
  script:
    - echo "Running tests..."
    - pip install -r requirements.txt
    - python -m pytest
  # Можно добавить артефакты с отчетами тестов, если нужно

deploy:
  stage: deploy
  image: google/cloud-sdk:latest # Нужен для gcloud команд
  variables:
    GIT_STRATEGY: clone # Клонируем код на runner, чтобы потом скопировать на VM
  before_script:
    - echo "Setting up Google Cloud credentials..."
    - echo "$GOOGLE_CLOUD_KEY" > /tmp/key.json
    # Активируем сервисный аккаунт, который будет выполнять команды на VM
    - gcloud auth activate-service-account --key-file=/tmp/key.json
    - gcloud config set project $GOOGLE_PROJECT_ID
  script:
    - echo "Deploying to VM via Docker Compose..."
    # Директория проекта на VM
    - export PROJECT_DIR="/home/$VM_USER/kafka-test"

    # Шаг 1: Проверка/установка необходимых пакетов на VM (git, docker, docker-compose)
    # Пользователю $VM_USER нужны sudo права для установки!
    - |
      gcloud compute ssh $VM_USER@$VM_NAME --zone=$GOOGLE_COMPUTE_ZONE --command="
        echo '--- Checking prerequisites on VM ---';
        sudo apt-get update -qq || true;

        # Проверка и установка Docker
        if ! command -v docker &> /dev/null; then
          echo 'Installing docker...';
          sudo apt-get install -y -qq docker.io;
          sudo systemctl start docker;
          sudo systemctl enable docker;
          # Добавляем пользователя в группу docker. Изменения могут потребовать перезахода.
          sudo usermod -aG docker \\$(whoami);
          echo \'Docker installed. User \\$(whoami) added to docker group.\';
        else
          echo 'Docker already installed.';
          # Проверяем, состоит ли пользователь в группе docker
          if ! groups | grep -q '\\bdocker\\b'; then
             echo \'User \\$(whoami) not in docker group, adding...\';
             sudo usermod -aG docker \\$(whoami);
             echo \'User \\$(whoami) added to docker group.\';
          else
             echo \'User \\$(whoami) already in docker group.\';
          fi;
        fi;

        # Проверка и установка Docker Compose
        if ! command -v docker-compose &> /dev/null; then echo 'Installing docker-compose...'; sudo apt-get install -y -qq docker-compose; else echo 'Docker Compose already installed.'; fi;

        echo '--- Prerequisites check done ---';
      " || exit 1 # Прерываем пайплайн, если установка не удалась

    # Шаг 2: Создание директории проекта на VM, если её нет
    - |
      gcloud compute ssh $VM_USER@$VM_NAME --zone=$GOOGLE_COMPUTE_ZONE --command="
        echo '--- Preparing project directory ---';
        mkdir -p \"${PROJECT_DIR}\";
        echo '--- Directory prepared ---';
      " || exit 1

    # Шаг 3: Копирование файлов из runner на VM
    - echo "Copying project files to VM..."
    - gcloud compute scp --recurse --zone=$GOOGLE_COMPUTE_ZONE ./* $VM_USER@$VM_NAME:$PROJECT_DIR/ || exit 1
    - echo "Files copied successfully"

    # Шаг 4: Запуск Docker Compose на VM
    - |
      gcloud compute ssh $VM_USER@$VM_NAME --zone=$GOOGLE_COMPUTE_ZONE --command="
        echo '--- Running Docker Compose ---';
        cd \"${PROJECT_DIR}\" || exit 1;
        echo 'Current directory: \\$(pwd)';
        echo 'Listing files:';
        ls -la;
        # Проверяем наличие docker-compose.yml
        if [ -f docker-compose.yml ]; then
          echo 'docker-compose.yml found.';
          echo 'Pulling latest images...';
          docker-compose pull; # Загружаем свежие образы
          echo 'Stopping any existing containers...';
          docker-compose down; # Останавливаем существующие контейнеры перед запуском новых
          echo 'Building and starting services...';
          # Запускаем в фоновом режиме, пересобираем образы если нужно, удаляем "осиротевшие" контейнеры
          docker-compose up -d --build --remove-orphans;
          echo 'Docker Compose finished.';
        else
          # Если файла нет - выводим ошибку и завершаем пайплайн с ошибкой
          echo 'ERROR: docker-compose.yml not found in ${PROJECT_DIR}!';
          exit 1;
        fi;
        echo '--- Docker Compose operation done ---';
        
        # Проверяем результат
        echo '--- Checking deployed services ---';
        docker-compose ps;
        echo '--- Testing web server ---';
        curl -sS http://localhost:3000 | head -n 20;
        echo '...';
      " || exit 1 # Прерываем пайплайн, если docker-compose не удался

  only:
    - main # Запускаем деплой только для main ветки 